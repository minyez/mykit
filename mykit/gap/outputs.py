# -*- coding: utf-8 -*-

from mykit.wien2k.utils import get_casename
from mykit.core.utils import trim_after, get_file_ext
from mykit.core.unit import EnergyUnit
import numpy as np

class Emac:
    """Class for analyzing macroscopic dielectric constant in case.emac file
    """

    def __init__(self, path_emac=None):
        p = path_emac
        if p is None:
            cn = get_casename()
            p = cn + '.emac'
        with open(p, 'r') as h:
            data = np.loadtxt(h, unpack=True)
        if np.shape(data)[0] == 6:
            self.lfe = True
        else:
            self.lfe = False
        self._freq = data[1, :]
        self._data = data[2:, :]
    
    @property
    def nfreqs(self):
        return len(self._freq)

    def get_frequency_grids(self):
        """Return the frequency grid points"""
        return self._freq.copy()
    
    def get_macro_dielec_function(self, lfe=True):
        """Return the macroscopic dielectric constants at different
        frequencies

        Args:
            lfe (bool): if set True, dielectric constants with 
                local-field effect will be returned.
        
        Note:
            Dielectric constants without LFE will be returned regardless
            of ``lfe`` when eps^-1 was not computed.

        Returns:
            two 1d arrays, real and imaginary part of the 
            dielectric constant.
        """
        col = 0
        if self.lfe and not lfe:
            col = 2
        return self._data[col, :], self._data[col+1, :]


class Eqp(EnergyUnit):

    """Class for reading files storing quais-paritcle energy data

    Args:
        path_eqp (str): data file generated by GAP.
            The extension should be the original one.
        unit (str)
        gw0 (bool)
    """

    _unit_name = {'ev': 'eV', 'au': 'H'}
    _gw_name = {'G0W0': 'GW', 'GW0': 'GW0'}
    
    def __init__(self, path_eqp=None, unit='ev', method='G0W0'):
        p = path_eqp
        
        if p is None:
            eunit = unit
            p = get_casename() + '.eqp'
            p += self._unit_name[eunit]
            gw = self._gw_name.get(method, None)
            if gw is None:
                raise ValueError(f"method {method} is not available. {list(self._gw_name.keys())}")
            p += '_' + gw
        else:
            _, eunit = self._analyze_kind(p)
        EnergyUnit.__init__(self, eunit=eunit)
        # load data
        data = np.loadtxt(p)
        nkpts = int(data[-1, 0])
        nbandsgw = int(data[-1, 1] - data[0, 1]) + 1
        self.eps = np.reshape(data[:, 2], (nkpts, nbandsgw), order="C")
        self.eqp = np.reshape(data[:, 3], (nkpts, nbandsgw), order="C")
        self.degw = np.reshape(data[:, -4], (nkpts, nbandsgw), order="C")
        self.nkpts = nkpts
        self.nbandsgw = nbandsgw

    def _analyze_kind(self, filepath):
        """Analyse the type of results by the extension name
        """
        ext = get_file_ext(filepath)[3:]
        u, gw = ext.split('_')
        unit = dict([(w, k) for k, w in self._unit_name.items()])[u]
        isg0w0 = dict([(w, k) for k, w in self._gw_name.items()])[gw]
        return isg0w0, unit

    def get_qp_gap(self):
        """"""
        raise NotImplementedError
    